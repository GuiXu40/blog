<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Introduction to Statistical learning and Supervised Learning</title>
    <url>/blog/2020/10/19/Introduction-to-Statistical-learning-and-Supervised-Learning/</url>
    <content><![CDATA[<h2 id="Introduction-to-Statistical-learning-and-Supervised-Learning"><a href="#Introduction-to-Statistical-learning-and-Supervised-Learning" class="headerlink" title="Introduction to Statistical learning and Supervised Learning"></a>Introduction to Statistical learning and Supervised Learning</h2><h3 id="本节概述"><a href="#本节概述" class="headerlink" title="本节概述"></a>本节概述</h3><p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/001.PNG" alt="001"></p>
<a id="more"></a>

<h3 id="统计学习"><a href="#统计学习" class="headerlink" title="统计学习"></a>统计学习</h3><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><p>统计学习是关于计算机基于数据构建概率模型并运用模型对数据进行预测和分析的一门学科，在如今的机器学习中，大多数算法也是根据数据来预测，所以也可以叫做机器学习方法</p>
<h5 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h5><p>统计学习研究的对象是数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">	特征抽取</span><br><span class="line">data-------&gt;模型</span><br></pre></td></tr></table></figure>

<h5 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h5><p>对数据进行预测和分析，使得计算机更加的智能化</p>
<h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>统计学习的方法是基于<code>数据</code>构建<code>概率统计模型</code>从而对数据进行预测和分析</p>
<p>实现统计学习方法的步骤如下：</p>
<ul>
<li>得到一个有限的训练数据集合</li>
<li>确定包含所有可能的模型的假设空间，即学习模型的集合</li>
<li>确定模型选择的准则，即学习的策略</li>
<li>实现求解最优模型的算法，即学习的算法</li>
<li>通过学习方法选择最优模型</li>
<li>利用学习的最优模型对新数据进行预测和分析</li>
</ul>
<h5 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h5><p>包括三方面</p>
<ul>
<li>统计学习方法</li>
<li>统计学习理论</li>
<li>停机学习应用</li>
</ul>
<h5 id="重要性"><a href="#重要性" class="headerlink" title="重要性"></a>重要性</h5><ul>
<li>处理海量数据</li>
<li>计算机智能化</li>
</ul>
<h3 id="统计学习分类"><a href="#统计学习分类" class="headerlink" title="统计学习分类"></a>统计学习分类</h3><h5 id="基本分类"><a href="#基本分类" class="headerlink" title="基本分类"></a>基本分类</h5><h6 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">监督学习（supervised learning）是指从标注数据中学习预测模型的机器学习问题</span><br><span class="line">	已知输入和输出，训练模型， 得到最优模型，根据训练得到的模型预测其他数据</span><br></pre></td></tr></table></figure>

<ul>
<li>输入空间，特征空间，输出空间</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将输入与输出所有可能取值的结合叫做输入空间和输出空间，可以是有限元素的集合，也可以是整个欧式空间</span><br><span class="line">每个具体的输入是一个实例，由特征向量表示。所有特征向量存在的空间称为特征空间</span><br></pre></td></tr></table></figure>

<p><code>输入变量</code>与<code>输出变量</code>可以是<code>连续</code>的也可以是<code>离散</code>的</p>
<ul>
<li>联合概率分布</li>
</ul>
<p>监督学习假设<code>输入变量X</code>与<code>输入变量Y</code>符合联合概率分布<code>P(X, Y)</code></p>
<ul>
<li>假设空间</li>
</ul>
<blockquote>
<p>监督学习的目的在于学习一个由输入到输出的映射，这一映射有模型来表示</p>
</blockquote>
<p>假设空间就是这些模型的集合</p>
<ul>
<li>图形表示</li>
</ul>
<p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/002.PNG" alt="002"></p>
<h6 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h6><p>无监督学习是指从<code>无标注数据</code>中学习预测模型的机器学习问题</p>
<blockquote>
<p>无监督学习的本质是学习数据中的统计规律或潜在结构</p>
</blockquote>
<p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/003.PNG" alt="003"></p>
<h6 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h6><p>强化学习（reinforcement learning） 是指智能系统在于环境的连续互动中学习最优行为策略的机器学习问题</p>
<p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/004.PNG" alt="004"></p>
<h6 id="半监督学习与主动学习"><a href="#半监督学习与主动学习" class="headerlink" title="半监督学习与主动学习"></a>半监督学习与主动学习</h6><p><code>半监督学习 Csemi-supervised earning)</code> 是指利用 标注数据和未标注数据学习预</p>
<p>测模型的机器学习问题。通常有少量标注数据、大量未标注数据，因为标注数据的构</p>
<p>建往往需要人工，成本较高，未标注数据的收集不需太多成本。半监督学习旨在利用</p>
<p>未标注数据中的信息，辅助标注数据，进行监督学习，以较低的成本达到较好的学习</p>
<p>效果。</p>
<p><code>主动学习 Cactiv earning) </code>是指机器不断主动给出实例让教师进行标注，然后利</p>
<p>用标注数据学习预测模型的机器学习问题。通常的监督学习使用给定的标注数据，往</p>
<p>往是随机得到的 ，可以看作是”被动学习” 主动学习的目标是找出对学习最有帮助的</p>
<p>实例让教师标注，以较小的标注代价，达到较好的学习效果</p>
<p>半监督学习和主动学习更接近监督学习。</p>
<h5 id="按模型分类"><a href="#按模型分类" class="headerlink" title="按模型分类"></a>按模型分类</h5><h6 id="概率模型和非概率模型"><a href="#概率模型和非概率模型" class="headerlink" title="概率模型和非概率模型"></a>概率模型和非概率模型</h6><p>在监督学习中，概率模型是生成模型，非概率模型是判别模型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">概率模型举例： 决策树，朴素贝叶斯，隐马尔可夫模型，条件随机场，概率潜在语义分析，潜在狄利克雷分配，高斯混合</span><br><span class="line">非概率模型： 感知机，支持向量机，k近邻，潜在语义分析，神经网络</span><br></pre></td></tr></table></figure>

<h6 id="线性模型和非线性模型"><a href="#线性模型和非线性模型" class="headerlink" title="线性模型和非线性模型"></a>线性模型和非线性模型</h6><p>看模型函数是否是线性的</p>
<h6 id="参数化模型与非参数化模型"><a href="#参数化模型与非参数化模型" class="headerlink" title="参数化模型与非参数化模型"></a>参数化模型与非参数化模型</h6><p><code>统计学习模型</code>又可以分为<code>参数化模型 (parametric model)</code>和`非参数化模型 (non</p>
<p>parametric model) <code>。参数化模型假设模型参数的</code>维度`固定，模型可以由有限维参数完</p>
<p>全刻画:非参数化模型假设模型参数的<code>维度不固定</code>或者说无穷大，随着训练数据量的</p>
<p>增加而不断增大。</p>
<h5 id="按算法分类"><a href="#按算法分类" class="headerlink" title="按算法分类"></a>按算法分类</h5><ul>
<li>在线学习</li>
</ul>
<p>在线学习是指每次接受 个样本，进行预测，之后学习模型，并不断重复该操作的机器学习。</p>
<ul>
<li>批量学习</li>
</ul>
<p>批量学习 次接受所有数据，学习模型，之后进行预测。有些实际应用的场景要求学习必须是在线的</p>
<h5 id="按技巧分类"><a href="#按技巧分类" class="headerlink" title="按技巧分类"></a>按技巧分类</h5><ul>
<li>贝叶斯学习</li>
</ul>
<p>在概率模型的学习和推理中，利用<code>贝叶斯定理</code>，计算在给定数据条件下模型的条件概率，即<code>后验概率</code>，并应用这个原理进行模型的估计，以及对数据的预测。将模型、未观测要素及其参数用变量表示，使用模型的<code>先验分布</code>是贝叶斯学习的特点。</p>
<p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/005.PNG" alt="005"></p>
<ul>
<li>核方法</li>
</ul>
<h3 id="统计学习方法三要素"><a href="#统计学习方法三要素" class="headerlink" title="统计学习方法三要素"></a>统计学习方法三要素</h3><h5 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h5><p>模型就是所要学习的条件概率分布或决策函数</p>
<h5 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h5><h6 id="损失函数和风险函数"><a href="#损失函数和风险函数" class="headerlink" title="损失函数和风险函数"></a>损失函数和风险函数</h6><ul>
<li>0-1损失函数</li>
</ul>
<p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/006.PNG" alt="005"></p>
<ul>
<li>平方损失函数</li>
</ul>
<p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/007.PNG" alt="007"></p>
<ul>
<li>绝对损失函数</li>
</ul>
<p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/008.PNG" alt="008"></p>
<ul>
<li>对数损失函数</li>
</ul>
<p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/009.PNG" alt="009"></p>
<p>损失函数值越小，模型就越好。由于模型的输入，输出（X，Y）是随机变量，遵循联合分布P(X, Y)，所以损失函数的期望是</p>
<p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/010.PNG" alt="010"></p>
<p>这是理论上模型f(X)关于联合分布P(X, Y)的平均意义下的损失，称为<code>风险函数</code>或<code>期望损失</code></p>
<blockquote>
<p>由于联合分布位置，所以不能直接计算</p>
</blockquote>
<p>模型f(X)关于训练数据集的平均损失称为<code>经验风险</code>或<code>经验损失</code></p>
<p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/011.PNG" alt="011"></p>
<p><code>注意</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">根据大数定律 当样本容量 趋于无穷时，经验风险趋于期望风险。所以一个很自然的想法是用经验风险估计期望风险。</span><br><span class="line">但是，由于现实中训练样本数目有限，甚至很小，所以用经验风险估计期望风险常常井不理想，要对经验风险进行 定的矫正。这就关系到监督学习的两个基本策略验风险最小化和结构风险最小化。</span><br></pre></td></tr></table></figure>

<h6 id="经验风险最小化与结构风险最小化"><a href="#经验风险最小化与结构风险最小化" class="headerlink" title="经验风险最小化与结构风险最小化"></a>经验风险最小化与结构风险最小化</h6><p>在假设空间，损失函数以及训练数据集确定的情况下，经验风险函数就可以确定。</p>
<p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/012.PNG" alt="012"></p>
<p>从经验风险最小化来看，经验风险最小的模型是最优的模型。–&gt; 风险最小化求最优模型就是求解最优化问题</p>
<blockquote>
<p>当样本容量很小时，经验风险最小化学习的效果未必很好，会产生<code>过拟合</code>问题，为了防止过拟合，提出了结构风险最小化</p>
</blockquote>
<p>结构风险在经验风险上加上<code>模型复杂度的正则化项或罚项</code></p>
<p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/013.PNG" alt="013    "></p>
<blockquote>
<p>为什么经验风险容易过拟合？ 为什么结构风险可以解决过拟合？</p>
</blockquote>
<h5 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h5><p>算法是指学习模型的具体计算方法</p>
<h3 id="模型评估与模型选择"><a href="#模型评估与模型选择" class="headerlink" title="模型评估与模型选择"></a>模型评估与模型选择</h3><p>当假设空间含有不同复杂度(例如，不同的参数个数)的模型时，就要面临模型选（model selection) 的问题。我们希望选择或学习 个合适的模型。如果在假设空间中存在”真”模型，那么所选择的模型应该逼近真模型。具体地所选择的模型要与真模型的参数个数相同，所选择的模型的参数向量与真模型的参数向量相近。如果一味追求提高对训练数据的预测能力，所选模型的复杂度则往往会比真模型更高</p>
<blockquote>
<p>过拟合是指学习时选择的模型所包含的参数过多，以至出现这模型对己知数据预测得很好，但对未知数据预测得很差的现象。</p>
</blockquote>
<p>正则化和交叉验证就是为了解决过拟合</p>
<h3 id="正则化与交叉验证"><a href="#正则化与交叉验证" class="headerlink" title="正则化与交叉验证"></a>正则化与交叉验证</h3><h5 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h5><p>模型选择的典型方法是<code>正则化 regularization) </code>。正则化是结构风险最小化策略的实现，是在经验风险上加 个<code>正则化项 (regularizer )</code>或<code>罚项(Cpena ty term)</code> 。正则化项一般是模型复杂度的单调递增函数，模型越复杂，正则化值就越大。比如 正则化项可以是<code>模型参数向量的范数</code>。</p>
<ul>
<li>L1范式</li>
</ul>
<p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/014.PNG" alt="014"></p>
<ul>
<li>L2范式</li>
</ul>
<p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/015.PNG" alt="015"></p>
<p>从<code>贝叶斯估计</code>的角度来看，正则化项对应于模型的<code>先验概率</code>。可以假设复杂的模型有较小的先验概率，简单的模型有较大的先验概率</p>
<h5 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h5><p>如果给定的样本数据充足，进行模型选择的 种简单方法是随机地将数据集切分成 部分，分别为训练集 (training set) 、验证集( validation set) 和测试集 (testset) 。训练集用来训练模型，验证集用于模型的选择，而测试集用于最终对学习方法的评估。在学习到的不同复杂度的模型中，选择对验证集有最小预测误差的模型。由于验证集有足够多的数据，用它对模型进行选择也是有效的。</p>
<ul>
<li>简单交叉验证</li>
</ul>
<p>简单交叉验证方法是:首先随机地将己给数据分为两部分， 部分作为训练集，另一部分作为测试集(例如， 70% 的数据为训练集， 30% 的数据为测试集) ;然后用训练集在各种条件下(例如，不同的参数个数)训练模型，从而得到不同的模型:在测试集上评价各个模型的测试误差，选出测试误差最小的模型。</p>
<ul>
<li>S折交叉验证</li>
</ul>
<p>应用最多的是 折交叉验证 （S-fold cross validation) ，方法如下:首先随机地将已给数据切分为 互不相交、大小相同的子集 ;然后利用 S-l 个子集的数据训练模型，利用 余下的子集测试模型 :将这 过程对可能的 种选择重复进行;最后选出S次评测中平均测试误差最小的模型。</p>
<ul>
<li>留一交叉验证</li>
</ul>
<p>S折交叉验证的特殊情形是 = 称为留一交叉验证( Oeave-one-out cross validation) ，往往在数据缺乏的情况下使用。这里 是给定数据集的容量。</p>
<h3 id="泛化能力"><a href="#泛化能力" class="headerlink" title="泛化能力"></a>泛化能力</h3><p>学习方法的泛化能力是指由该方法学习到的模型对未知数据的预测能力，泛化误差就是模型的期望风险</p>
<h3 id="生成模型与判别模型"><a href="#生成模型与判别模型" class="headerlink" title="生成模型与判别模型"></a>生成模型与判别模型</h3><h3 id="监督学习应用"><a href="#监督学习应用" class="headerlink" title="监督学习应用"></a>监督学习应用</h3><ul>
<li>分类问题</li>
<li>标注问题</li>
<li>回归问题</li>
</ul>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>python socket编程</title>
    <url>/blog/2020/10/19/python-socket%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="socket编程"><a href="#socket编程" class="headerlink" title="socket编程"></a>socket编程</h2><blockquote>
<p>转载 <a href="https://www.liujiangblog.com/course/python/76">https://www.liujiangblog.com/course/python/76</a></p>
</blockquote>
<p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-python-socket%E7%BC%96%E7%A8%8B/002.PNG" alt="002"></p>
<a id="more"></a>

<h3 id="流程图–重点"><a href="#流程图–重点" class="headerlink" title="流程图–重点"></a>流程图–重点</h3><p>socket是基于C/S架构的，也就是说进行socket网络编程，通常需要编写两个py文件，一个服务端，一个客户端。</p>
<p>首先，导入Python中的socket模块： import socket</p>
<p>Python中的socket通信逻辑如下图所示（图片来自网络）：</p>
<p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-python-socket%E7%BC%96%E7%A8%8B/001.png" alt="001"></p>
<p>这张逻辑图，是整个socket编程中的重点的重点，你必须将它理解、吃透，然后刻在脑海里，真正成为自己记忆的一部分！很多人说怎么都学不会socket编程，归根到底的原因就是没有“死记硬背”知识点。</p>
<p>在Python中，<code>import socket</code>后，用<code>socket.socket()</code>方法来创建套接字，语法格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sk = socket.socket([family[, <span class="built_in">type</span>[, proto]]])</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>family: 套接字家族，可以使<code>AF_UNIX</code>或者<code>AF_INET</code>。</li>
<li>type: 套接字类型，根据是面向连接的还是非连接分为<code>SOCK_STREAM</code>或<code>SOCK_DGRAM</code>，也就是TCP和UDP的区别。</li>
<li>protocol: 一般不填默认为0。</li>
</ul>
<blockquote>
<p>直接socket.socket(), 则全部使用默认值</p>
</blockquote>
<p>具体参数定义：</p>
<table>
<thead>
<tr>
<th><strong>socket类型</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>socket.AF_UNIX</td>
<td>只能够用于单一的Unix系统进程间通信</td>
</tr>
<tr>
<td>socket.AF_INET</td>
<td>IPv4</td>
</tr>
<tr>
<td>socket.AF_INET6</td>
<td>IPv6</td>
</tr>
<tr>
<td>socket.SOCK_STREAM</td>
<td>流式socket , for TCP</td>
</tr>
<tr>
<td>socket.SOCK_DGRAM</td>
<td>数据报式socket , for UDP</td>
</tr>
<tr>
<td>socket.SOCK_RAW</td>
<td>原始套接字，普通的套接字无法处理ICMP、IGMP等网络报文，而SOCK_RAW可以；其次，SOCK_RAW也可以处理特殊的IPv4报文；此外，利用原始套接字，可以通过IP_HDRINCL套接字选项由用户构造IP头。</td>
</tr>
<tr>
<td>socket.SOCK_SEQPACKET</td>
<td>可靠的连续数据包服务</td>
</tr>
<tr>
<td>创建TCP Socket：</td>
<td>s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</td>
</tr>
<tr>
<td>创建UDP Socket：</td>
<td>s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</td>
</tr>
</tbody></table>
<p>通过<code>s = socket.socket()</code>方法，我们可以获得一个socket对象s，也就是通常说的获取了一个“套接字”，该对象具有一下方法：</p>
<table>
<thead>
<tr>
<th><strong>方法</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>服务器端方法</strong></td>
<td></td>
</tr>
<tr>
<td><strong>s.bind()</strong></td>
<td>绑定地址（host,port）到套接字，在AF_INET下,以元组（host,port）的形式表示地址。</td>
</tr>
<tr>
<td><strong>s.listen(backlog)</strong></td>
<td>开始监听。backlog指定在拒绝连接之前，操作系统可以挂起的最大连接数量。该值至少为1，大部分应用程序设为5就可以了。这个不是最大连接数。</td>
</tr>
<tr>
<td><strong>s.accept()</strong></td>
<td>被动接受客户端连接,(阻塞式)等待连接的到来，并返回（conn,address）二元元组,其中conn是一个通信对象，可以用来接收和发送数据。address是连接客户端的地址。</td>
</tr>
<tr>
<td><strong>客户端方法</strong></td>
<td></td>
</tr>
<tr>
<td><strong>s.connect(address)</strong></td>
<td>客户端向服务端发起连接。一般address的格式为元组（hostname,port），如果连接出错，返回socket.error错误。</td>
</tr>
<tr>
<td>s.connect_ex()</td>
<td>connect()函数的扩展版本,出错时返回出错码,而不是抛出异常</td>
</tr>
<tr>
<td><strong>公共方法</strong></td>
<td></td>
</tr>
<tr>
<td><strong>s.recv(bufsize)</strong></td>
<td>接收数据，数据以bytes类型返回，bufsize指定要接收的最大数据量。</td>
</tr>
<tr>
<td><strong>s.send()</strong></td>
<td>发送数据。返回值是要发送的字节数量。</td>
</tr>
<tr>
<td><strong>s.sendall()</strong></td>
<td>完整发送数据。将数据发送到连接的套接字，但在返回之前会尝试发送所有数据。成功返回None，失败则抛出异常。</td>
</tr>
<tr>
<td>s.recvform()</td>
<td>接收UDP数据，与recv()类似，但返回值是（data,address）。其中data是包含接收的数据，address是发送数据的套接字地址。</td>
</tr>
<tr>
<td>s.sendto(data,address)</td>
<td>发送UDP数据，将数据data发送到套接字，address是形式为（ipaddr，port）的元组，指定远程地址。返回值是发送的字节数。</td>
</tr>
<tr>
<td><strong>s.close()</strong></td>
<td>关闭套接字，必须执行。</td>
</tr>
<tr>
<td>s.getpeername()</td>
<td>返回连接套接字的远程地址。返回值通常是元组（ipaddr,port）。</td>
</tr>
<tr>
<td>s.getsockname()</td>
<td>返回套接字自己的地址。通常是一个元组(ipaddr,port)</td>
</tr>
<tr>
<td>s.setsockopt(level,optname,value)</td>
<td>设置给定套接字选项的值。</td>
</tr>
<tr>
<td>s.getsockopt(level,optname[.buflen])</td>
<td>返回套接字选项的值。</td>
</tr>
<tr>
<td>s.settimeout(timeout)</td>
<td>设置套接字操作的超时期，timeout是一个浮点数，单位是秒。值为None表示没有超时期。一般，超时期应该在刚创建套接字时设置，因为它们可能用于连接的操作（如connect()）</td>
</tr>
<tr>
<td>s.gettimeout()</td>
<td>返回当前超时期的值，单位是秒，如果没有设置超时期，则返回None。</td>
</tr>
<tr>
<td>s.fileno()</td>
<td>返回套接字的文件描述符。</td>
</tr>
<tr>
<td>s.setblocking(flag)</td>
<td>如果flag为0，则将套接字设为非阻塞模式，否则将套接字设为阻塞模式（默认值）。非阻塞模式下，如果调用recv()没有发现任何数据，或send()调用无法立即发送数据，那么将引起socket.error异常。</td>
</tr>
<tr>
<td>s.makefile()</td>
<td>创建一个与该套接字相关连的文件</td>
</tr>
</tbody></table>
<p><strong>注意事项：</strong></p>
<ol>
<li>Python3以后，socket传递的都是<strong>bytes类型</strong>的数据，字符串需要先转换一下，<code>string.encode()</code>即可；另一端接收到的bytes数据想转换成字符串，只要<code>bytes.decode()</code>一下就可以。</li>
<li>在正常通信时，<code>accept()</code>和<code>recv()</code>方法都是阻塞的。所谓的阻塞，指的是程序会暂停在那，一直等到有数据过来。</li>
</ol>
<h3 id="socket编程思路"><a href="#socket编程思路" class="headerlink" title="socket编程思路"></a>socket编程思路</h3><p><strong>服务端：</strong></p>
<ol>
<li>创建套接字，绑定套接字到本地IP与端口：socket.socket(socket.AF_INET,socket.SOCK_STREAM) , s.bind()</li>
<li>开始监听连接：s.listen()</li>
<li>进入循环，不断接受客户端的连接请求：s.accept()</li>
<li>接收传来的数据，或者发送数据给对方：s.recv() , s.sendall()</li>
<li>传输完毕后，关闭套接字：s.close()</li>
</ol>
<p><strong>客户端:</strong></p>
<ol>
<li>创建套接字，连接服务器地址：socket.socket(socket.AF_INET,socket.SOCK_STREAM) , s.connect()</li>
<li>连接后发送数据和接收数据：s.sendall(), s.recv()</li>
<li>传输完毕后，关闭套接字：s.close()</li>
</ol>
<p>Python的socket编程，通常可分为TCP和UDP编程两种，前者是带连接的可靠传输服务，每次通信都要握手，结束传输也要挥手，数据会被检验，是使用最广的通用模式；后者是不带连接的传输服务，简单粗暴，不加控制和检查的一股脑将数据发送出去的方式，但是传输速度快，通常用于安全和可靠等级不高的业务场景，比如文件下载。</p>
<h3 id="TCP编程"><a href="#TCP编程" class="headerlink" title="TCP编程"></a>TCP编程</h3><p><strong>服务器端：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">ip_port = (<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line">sk = socket.socket()            <span class="comment"># 创建套接字</span></span><br><span class="line">sk.bind(ip_port)                <span class="comment"># 绑定服务地址</span></span><br><span class="line">sk.listen(<span class="number">5</span>)                    <span class="comment"># 监听连接请求</span></span><br><span class="line">print(<span class="string">&#x27;启动socket服务，等待客户端连接...&#x27;</span>)</span><br><span class="line">conn, address = sk.accept()     <span class="comment"># 等待连接，此处自动阻塞</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:     <span class="comment"># 一个死循环，直到客户端发送‘exit’的信号，才关闭连接</span></span><br><span class="line">    client_data = conn.recv(<span class="number">1024</span>).decode()      <span class="comment"># 接收信息</span></span><br><span class="line">    <span class="keyword">if</span> client_data == <span class="string">&quot;exit&quot;</span>:       <span class="comment"># 判断是否退出连接</span></span><br><span class="line">        exit(<span class="string">&quot;通信结束&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;来自%s的客户端向你发来信息：%s&quot;</span> % (address, client_data))</span><br><span class="line">    conn.sendall(<span class="string">&#x27;服务器已经收到你的信息&#x27;</span>.encode())    <span class="comment"># 回馈信息给客户端</span></span><br><span class="line">conn.close()    <span class="comment"># 关闭连接</span></span><br></pre></td></tr></table></figure>

<p><strong>客户端：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">ip_port = (<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line">s = socket.socket()     <span class="comment"># 创建套接字</span></span><br><span class="line"></span><br><span class="line">s.connect(ip_port)      <span class="comment"># 连接服务器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:     <span class="comment"># 通过一个死循环不断接收用户输入，并发送给服务器</span></span><br><span class="line">    inp = <span class="built_in">input</span>(<span class="string">&quot;请输入要发送的信息： &quot;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> inp:     <span class="comment"># 防止输入空信息，导致异常退出</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    s.sendall(inp.encode())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> inp == <span class="string">&quot;exit&quot;</span>:   <span class="comment"># 如果输入的是‘exit’，表示断开连接</span></span><br><span class="line">        print(<span class="string">&quot;结束通信！&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    server_reply = s.recv(<span class="number">1024</span>).decode()</span><br><span class="line">    print(server_reply)</span><br><span class="line"></span><br><span class="line">s.close()       <span class="comment"># 关闭连接</span></span><br></pre></td></tr></table></figure>

<p>上面这个例子，基本能够展示出socket通信的机制。套接字的创建和关闭，服务器的绑定和监听，客户端的连接，这些都是固定套路，没什么难点。关键之处在于循环内部的收发逻辑，这里才是重点，需要根据你自己的业务需求，正确编写。这个过程中，一定要注意，收发是一一对应的，有发就要有收，并且recv()方法默认是阻塞的。</p>
<p>大家可以在自己的环境中测试上面的例子，并加入更多的内容，不断地进行尝试。然而试过之后，你们会发现，虽然服务器和客户端在一对一的情况下，工作良好，但是，如果有多个客户端同时连接同一个服务器呢？结果可能不太令人满意，因为服务器无法同时对多个客户端提供服务。为什么会这样呢？因为Python的socket模块，默认情况下创建的是单进程单线程，同时只能处理一个连接请求，如果要实现多用户服务，那么需要使用多珯以很明显地看到，服务器能够同时与多个客户端通信，基本达到我们的目的。</p><h3 id="UDP编程"><a href="#UDP编程" class="headerlink" title="UDP编程"></a>UDP编程</h3><p>相对TCP编程，UDP编程就简单多了，当然可靠性和安全性也差很多。由于UDP没有握手和挥手的过程，因此accept()和connect()方法都不需要。下面是一个简单的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">ip_port = (<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">9999</span>)</span><br><span class="line">sk = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, <span class="number">0</span>)</span><br><span class="line">sk.bind(ip_port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = sk.recv(<span class="number">1024</span>).strip().decode()</span><br><span class="line">    print(data)</span><br><span class="line">    <span class="keyword">if</span> data == <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">        print(<span class="string">&quot;客户端主动断开连接！&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">sk.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">ip_port = (<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line">sk = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    inp = <span class="built_in">input</span>(<span class="string">&#x27;发送的消息：&#x27;</span>).strip()</span><br><span class="line">    sk.sendto(inp.encode(), ip_port)</span><br><span class="line">    <span class="keyword">if</span> inp == <span class="string">&#x27;exit&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">sk.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> socket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction to Statistical learning and Supervised Learning</title>
      <link href="/blog/2020/10/19/Introduction-to-Statistical-learning-and-Supervised-Learning/"/>
      <url>/blog/2020/10/19/Introduction-to-Statistical-learning-and-Supervised-Learning/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction-to-Statistical-learning-and-Supervised-Learning"><a href="#Introduction-to-Statistical-learning-and-Supervised-Learning" class="headerlink" title="Introduction to Statistical learning and Supervised Learning"></a>Introduction to Statistical learning and Supervised Learning</h2><h3 id="本节概述"><a href="#本节概述" class="headerlink" title="本节概述"></a>本节概述</h3><p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/001.PNG" alt="001"></p><a id="more"></a><h3 id="统计学习"><a href="#统计学习" class="headerlink" title="统计学习"></a>统计学习</h3><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><p>统计学习是关于计算机基于数据构建概率模型并运用模型对数据进行预测和分析的一门学科，在如今的机器学习中，大多数算法也是根据数据来预测，所以也可以叫做机器学习方法</p><h5 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h5><p>统计学习研究的对象是数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">特征抽取</span><br><span class="line">data-------&gt;模型</span><br></pre></td></tr></table></figure><h5 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h5><p>对数据进行预测和分析，使得计算机更加的智能化</p><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>统计学习的方法是基于<code>数据</code>构建<code>概率统计模型</code>从而对数据进行预测和分析</p><p>实现统计学习方法的步骤如下：</p><ul><li>得到一个有限的训练数据集合</li><li>确定包含所有可能的模型的假设空间，即学习模型的集合</li><li>确定模型选择的准则，即学习的策略</li><li>实现求解最优模型的算法，即学习的算法</li><li>通过学习方法选择最优模型</li><li>利用学习的最优模型对新数据进行预测和分析</li></ul><h5 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h5><p>包括三方面</p><ul><li>统计学习方法</li><li>统计学习理论</li><li>停机学习应用</li></ul><h5 id="重要性"><a href="#重要性" class="headerlink" title="重要性"></a>重要性</h5><ul><li>处理海量数据</li><li>计算机智能化</li></ul><h3 id="统计学习分类"><a href="#统计学习分类" class="headerlink" title="统计学习分类"></a>统计学习分类</h3><h5 id="基本分类"><a href="#基本分类" class="headerlink" title="基本分类"></a>基本分类</h5><h6 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">监督学习（supervised learning）是指从标注数据中学习预测模型的机器学习问题</span><br><span class="line">已知输入和输出，训练模型， 得到最优模型，根据训练得到的模型预测其他数据</span><br></pre></td></tr></table></figure><ul><li>输入空间，特征空间，输出空间</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将输入与输出所有可能取值的结合叫做输入空间和输出空间，可以是有限元素的集合，也可以是整个欧式空间</span><br><span class="line">每个具体的输入是一个实例，由特征向量表示。所有特征向量存在的空间称为特征空间</span><br></pre></td></tr></table></figure><p><code>输入变量</code>与<code>输出变量</code>可以是<code>连续</code>的也可以是<code>离散</code>的</p><ul><li>联合概率分布</li></ul><p>监督学习假设<code>输入变量X</code>与<code>输入变量Y</code>符合联合概率分布<code>P(X, Y)</code></p><ul><li>假设空间</li></ul><blockquote><p>监督学习的目的在于学习一个由输入到输出的映射，这一映射有模型来表示</p></blockquote><p>假设空间就是这些模型的集合</p><ul><li>图形表示</li></ul><p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/002.PNG" alt="002"></p><h6 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h6><p>无监督学习是指从<code>无标注数据</code>中学习预测模型的机器学习问题</p><blockquote><p>无监督学习的本质是学习数据中的统计规律或潜在结构</p></blockquote><p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/003.PNG" alt="003"></p><h6 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h6><p>强化学习（reinforcement learning） 是指智能系统在于环境的连续互动中学习最优行为策略的机器学习问题</p><p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/004.PNG" alt="004"></p><h6 id="半监督学习与主动学习"><a href="#半监督学习与主动学习" class="headerlink" title="半监督学习与主动学习"></a>半监督学习与主动学习</h6><p><code>半监督学习 Csemi-supervised earning)</code> 是指利用 标注数据和未标注数据学习预</p><p>测模型的机器学习问题。通常有少量标注数据、大量未标注数据，因为标注数据的构</p><p>建往往需要人工，成本较高，未标注数据的收集不需太多成本。半监督学习旨在利用</p><p>未标注数据中的信息，辅助标注数据，进行监督学习，以较低的成本达到较好的学习</p><p>效果。</p><p><code>主动学习 Cactiv earning) </code>是指机器不断主动给出实例让教师进行标注，然后利</p><p>用标注数据学习预测模型的机器学习问题。通常的监督学习使用给定的标注数据，往</p><p>往是随机得到的 ，可以看作是”被动学习” 主动学习的目标是找出对学习最有帮助的</p><p>实例让教师标注，以较小的标注代价，达到较好的学习效果</p><p>半监督学习和主动学习更接近监督学习。</p><h5 id="按模型分类"><a href="#按模型分类" class="headerlink" title="按模型分类"></a>按模型分类</h5><h6 id="概率模型和非概率模型"><a href="#概率模型和非概率模型" class="headerlink" title="概率模型和非概率模型"></a>概率模型和非概率模型</h6><p>在监督学习中，概率模型是生成模型，非概率模型是判别模型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">概率模型举例： 决策树，朴素贝叶斯，隐马尔可夫模型，条件随机场，概率潜在语义分析，潜在狄利克雷分配，高斯混合</span><br><span class="line">非概率模型： 感知机，支持向量机，k近邻，潜在语义分析，神经网络</span><br></pre></td></tr></table></figure><h6 id="线性模型和非线性模型"><a href="#线性模型和非线性模型" class="headerlink" title="线性模型和非线性模型"></a>线性模型和非线性模型</h6><p>看模型函数是否是线性的</p><h6 id="参数化模型与非参数化模型"><a href="#参数化模型与非参数化模型" class="headerlink" title="参数化模型与非参数化模型"></a>参数化模型与非参数化模型</h6><p><code>统计学习模型</code>又可以分为<code>参数化模型 (parametric model)</code>和`非参数化模型 (non</p><p>parametric model) <code>。参数化模型假设模型参数的</code>维度`固定，模型可以由有限维参数完</p><p>全刻画:非参数化模型假设模型参数的<code>维度不固定</code>或者说无穷大，随着训练数据量的</p><p>增加而不断增大。</p><h5 id="按算法分类"><a href="#按算法分类" class="headerlink" title="按算法分类"></a>按算法分类</h5><ul><li>在线学习</li></ul><p>在线学习是指每次接受 个样本，进行预测，之后学习模型，并不断重复该操作的机器学习。</p><ul><li>批量学习</li></ul><p>批量学习 次接受所有数据，学习模型，之后进行预测。有些实际应用的场景要求学习必须是在线的</p><h5 id="按技巧分类"><a href="#按技巧分类" class="headerlink" title="按技巧分类"></a>按技巧分类</h5><ul><li>贝叶斯学习</li></ul><p>在概率模型的学习和推理中，利用<code>贝叶斯定理</code>，计算在给定数据条件下模型的条件概率，即<code>后验概率</code>，并应用这个原理进行模型的估计，以及对数据的预测。将模型、未观测要素及其参数用变量表示，使用模型的<code>先验分布</code>是贝叶斯学习的特点。</p><p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/005.PNG" alt="005"></p><ul><li>核方法</li></ul><h3 id="统计学习方法三要素"><a href="#统计学习方法三要素" class="headerlink" title="统计学习方法三要素"></a>统计学习方法三要素</h3><h5 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h5><p>模型就是所要学习的条件概率分布或决策函数</p><h5 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h5><h6 id="损失函数和风险函数"><a href="#损失函数和风险函数" class="headerlink" title="损失函数和风险函数"></a>损失函数和风险函数</h6><ul><li>0-1损失函数</li></ul><p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/006.PNG" alt="005"></p><ul><li>平方损失函数</li></ul><p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/007.PNG" alt="007"></p><ul><li>绝对损失函数</li></ul><p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/008.PNG" alt="008"></p><ul><li>对数损失函数</li></ul><p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/009.PNG" alt="009"></p><p>损失函数值越小，模型就越好。由于模型的输入，输出（X，Y）是随机变量，遵循联合分布P(X, Y)，所以损失函数的期望是</p><p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/010.PNG" alt="010"></p><p>这是理论上模型f(X)关于联合分布P(X, Y)的平均意义下的损失，称为<code>风险函数</code>或<code>期望损失</code></p><blockquote><p>由于联合分布位置，所以不能直接计算</p></blockquote><p>模型f(X)关于训练数据集的平均损失称为<code>经验风险</code>或<code>经验损失</code></p><p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/011.PNG" alt="011"></p><p><code>注意</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">根据大数定律 当样本容量 趋于无穷时，经验风险趋于期望风险。所以一个很自然的想法是用经验风险估计期望风险。</span><br><span class="line">但是，由于现实中训练样本数目有限，甚至很小，所以用经验风险估计期望风险常常井不理想，要对经验风险进行 定的矫正。这就关系到监督学习的两个基本策略验风险最小化和结构风险最小化。</span><br></pre></td></tr></table></figure><h6 id="经验风险最小化与结构风险最小化"><a href="#经验风险最小化与结构风险最小化" class="headerlink" title="经验风险最小化与结构风险最小化"></a>经验风险最小化与结构风险最小化</h6><p>在假设空间，损失函数以及训练数据集确定的情况下，经验风险函数就可以确定。</p><p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/012.PNG" alt="012"></p><p>从经验风险最小化来看，经验风险最小的模型是最优的模型。–&gt; 风险最小化求最优模型就是求解最优化问题</p><blockquote><p>当样本容量很小时，经验风险最小化学习的效果未必很好，会产生<code>过拟合</code>问题，为了防止过拟合，提出了结构风险最小化</p></blockquote><p>结构风险在经验风险上加上<code>模型复杂度的正则化项或罚项</code></p><p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/013.PNG" alt="013    "></p><blockquote><p>为什么经验风险容易过拟合？ 为什么结构风险可以解决过拟合？</p></blockquote><h5 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h5><p>算法是指学习模型的具体计算方法</p><h3 id="模型评估与模型选择"><a href="#模型评估与模型选择" class="headerlink" title="模型评估与模型选择"></a>模型评估与模型选择</h3><p>当假设空间含有不同复杂度(例如，不同的参数个数)的模型时，就要面临模型选（model selection) 的问题。我们希望选择或学习 个合适的模型。如果在假设空间中存在”真”模型，那么所选择的模型应该逼近真模型。具体地所选择的模型要与真模型的参数个数相同，所选择的模型的参数向量与真模型的参数向量相近。如果一味追求提高对训练数据的预测能力，所选模型的复杂度则往往会比真模型更高</p><blockquote><p>过拟合是指学习时选择的模型所包含的参数过多，以至出现这模型对己知数据预测得很好，但对未知数据预测得很差的现象。</p></blockquote><p>正则化和交叉验证就是为了解决过拟合</p><h3 id="正则化与交叉验证"><a href="#正则化与交叉验证" class="headerlink" title="正则化与交叉验证"></a>正则化与交叉验证</h3><h5 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h5><p>模型选择的典型方法是<code>正则化 regularization) </code>。正则化是结构风险最小化策略的实现，是在经验风险上加 个<code>正则化项 (regularizer )</code>或<code>罚项(Cpena ty term)</code> 。正则化项一般是模型复杂度的单调递增函数，模型越复杂，正则化值就越大。比如 正则化项可以是<code>模型参数向量的范数</code>。</p><ul><li>L1范式</li></ul><p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/014.PNG" alt="014"></p><ul><li>L2范式</li></ul><p><img src="https://guixu40.github.io/images_bed/images_blog/2020-10-19-Introduction-to-Statistical-learning-and-Supervised-Learning/015.PNG" alt="015"></p><p>从<code>贝叶斯估计</code>的角度来看，正则化项对应于模型的<code>先验概率</code>。可以假设复杂的模型有较小的先验概率，简单的模型有较大的先验概率</p><h5 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h5><p>如果给定的样本数据充足，进行模型选择的 种简单方法是随机地将数据集切分成 部分，分别为训练集 (training set) 、验证集( validation set) 和测试集 (testset) 。训练集用来训练模型，验证集用于模型的选择，而测试集用于最终对学习方法的评估。在学习到的不同复杂度的模型中，选择对验证集有最小预测误差的模型。由于验证集有足够多的数据，用它对模型进行选择也是有效的。</p><ul><li>简单交叉验证</li></ul><p>简单交叉验证方法是:首先随机地将己给数据分为两部分， 部分作为训练集，另一部分作为测试集(例如， 70% 的数据为训练集， 30% 的数据为测试集) ;然后用训练集在各种条件下(例如，不同的参数个数)训练模型，从而得到不同的模型:在测试集上评价各个模型的测试误差，选出测试误差最小的模型。</p><ul><li>S折交叉验证</li></ul><p>应用最多的是 折交叉验证 （S-fold cross validation) ，方法如下:首先随机地将已给数据切分为 互不相交、大小相同的子集 ;然后利用 S-l 个子集的数据训练模型，利用 余下的子集测试模型 :将这 过程对可能的 种选择重复进行;最后选出S次评测中平均测试误差最小的模型。</p><ul><li>留一交叉验证</li></ul><p>S折交叉验证的特殊情形是 = 称为留一交叉验证( Oeave-one-out cross validation) ，往往在数据缺乏的情况下使用。这里 是给定数据集的容量。</p><h3 id="泛化能力"><a href="#泛化能力" class="headerlink" title="泛化能力"></a>泛化能力</h3><p>学习方法的泛化能力是指由该方法学习到的模型对未知数据的预测能力，泛化误差就是模型的期望风险</p><h3 id="生成模型与判别模型"><a href="#生成模型与判别模型" class="headerlink" title="生成模型与判别模型"></a>生成模型与判别模型</h3><h3 id="监督学习应用"><a href="#监督学习应用" class="headerlink" title="监督学习应用"></a>监督学习应用</h3><ul><li>分类问题</li><li>标注问题</li><li>回归问题</li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/blog/2020/10/18/hello-world/"/>
      <url>/blog/2020/10/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
